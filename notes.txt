
Every THREE.js object must have a Geometry and a Material

GEOMETRIES

Box Geometry
(six parameters)
width: the size on the x axis
height: the size on the y axis
depth: the size on the z axis
widthSegments: How many subdivisions on the x axis
heightSegments: How many subdivisions on the y axis
depthSegments: How many subdivisions on the z axis

Segments control how many faces 
1 = two triangles
2 = eight triangles



Mipmapping is a technique that consists of creating half a smaller version of a texture again and again until we get 1x1 texture
Texture variations are sent to GPU, which chooses most appropriate version of the texture


Create your own matcaps
3D software
Render a sphere in front of the camera in a square image

2D software (like PS)
Use soft brushes on a square image(bg) and paint where you want light reflections

Online Tools


Only 3 types of light support shadows
PointLight
DirectionalLight
SpotLight

Shadows: Amplitude

Has top, right, bottom, and left values
Reduces the size of the camera view to help fix anomolies 

The smaller the values, the more precise the shadow will be. If it's too small, the shadows will be cropped

Shadow maps 
THREE.BasicShadowMap - Very performant but lousy quality
THREE.PCFShadowMap - Less performant but smoother edges (default)
THREE.PCFSoftShadowMap - Less performant but even softer edges
THREE.VSMShadowMap - Less performant, more constraints, can have unexpected results

NOTE: Radius values values do not work with PCFSoftShadowMap

HAUNTED HOUSE PROJECT!! 

NOTE ABOUT SETTING A SPECIFIC UNIT RATIO
EXAMPLE: HOUSE = 1 METER, CITY = 1 KILOMETER, MOUSE 1 CENTIMETER
A specific unit ratio will help create geometries 

Build a floor 
- square plane perfectly centered in the scene, 0 on the y-axis is the floor level

Using PBR (Physically Based Rendering) which are compatible with MeshStandardMaterial

Create a Group
-- used just in case I want to move the entire object '